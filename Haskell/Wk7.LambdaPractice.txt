

# Lambda calculus exercises

## Slide 12

### Round 1

   [(\x.x) z]
-> z
## Where is the redex?
## The whole thing (application with lambda on the LHS)
## Replace the whole body,
## Substitute z for x


 (\xy.x) z

## Expand/remove the syntactic sugar
## Rewrite it in a way that we can easily understand

= [(\x.(\y.x)) z]

## Now we have an application on the LHS
## Substitute z for all of the x's in the body

-> \y.z


  (\xy.x) z u
## Extend/remove the syntactic sugar
= [(\x.(\y.x)) z] u

# (\x.(\y.x)) z -- is the first application/redex we can reduce
# Substitute z for x in the body

-> [(\y.z) u] -- now we have one redex

# Substitute y for u in the body of the abstraction
# There's no y in the body to substitute.
# So we only have z

-> z

## Parenthesis around the left-most application
## Application is left-associative


### Round 2

([\x.(x x)]) ([\y.y]) -- [\x.x x] is the abstraction of the application with lambda on the left hand side
 __________________
-> (\y.y) (\y.y) -- substitute \y.y for the body of the abstraction, which is just y
   -------------
-> (\y.y)

\x.(\y.y) z - there are two applications
   ---------
-- \x is the abstraction and
-- (\y.y) z is the body of the abstraction (abstractions extend far right)

-> \x.z -- substitute z for any reference of y in the body of abstraction, y


## How many applications do we have here? One with z as argument
## There are two abstractions.
## \y. is our abstraction as it goes as far right as possible

  (\x.(x (\y.x))) z
  ------------------
-> z (\y.z) -- substitute z for any reference of x in the body (x (\y.x))
-- This is not a redex



## Examples of free and bound variables

(\x.(x y)) z

Free: y (referenced, but not declared) and z
Bound: x

(\x1.x1 y) x0
Free: x0 and y
Bound: x1 (this is a different x!)

(\x.x y) z
within the body of the abstraction (x y): both x and y are free
