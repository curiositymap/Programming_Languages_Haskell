-- Quiz 3 Lambda Calculus
-- Beta reduction strategy

Step 1. Identify the redexes
-- Abstraction extends as far right as possible
-- Applications are left-associative: e1 e2 e3 is equivalent to (e1 e2) e3

Step 2. Pick the right redex depending on the reduction strategy
-- Normal-order reduction: leftmost redex
-- Applicative-order reduction: leftmost of innermost redex

1. λx. (λx.x) x

Normal-order reduction:
   \x. [(\x.x) x] -- there is only one redex since the abstraction is [(\x.x) x]
=  \x. x

Applicative-order reduction: same

2. (λxyz. z y x) z (λx.x) (λy.y)

Normal-order reduction:
   (([(\x.\y.\z. z y x) z]) (\x.x)) (\y.y)
->   [((\y.\w. w y z)       (\x.x))] (\y.y)
->       [(\w. w \x.x z)             (\y.y)]
->            [\y.y \x.x] z
->            [\x.x z]
->                z

Applicative-order reduction: same
   [(\x.\y.\z. z y x) z] (\x.x) (\y.y)
-> [((\y.\w. w y z) (\x.x))] (\y.y)  -- Application is left-associative, so there's only one redex
->     [(\w. w \x.x z) (\y.y)]
->           [\y.y \x.x] z
->           [\x.x z]
->               z


3. (λx. (λy.x) y) z

Normal-order reduction:
   [(\x. (\y.x) y) z]  -- x inside the abstraction is NOT free! It's bounded and substituted by the argument
->      [(\y.z) y]
->           z

Applicative-order reduction:
   (\x. [(\y.x) y]) z
-> [(\x.     x)     z]
->           z

4. (λxy. x z) y z

Normal-order reduction:
    [(\x.\y. x z) y] z
->     [(\w. y z)   z]
->             y z

Applicative-order reduction:

     [(\x.\y. x z) y] z  -- Expressions are left-associative, so there's only one redex
->        [(\w. y z) z]
->              y z

5. (λx. x x) ((λy.y) z)

Normal-order reduction:
   [(\x. x x) ((\y. y) z)]
-> [((\y. y) z)] ((\y. y) z)
->        z     [((\y. y) z)]
->        z            z

Applicative-order reduction:
    (\x. x x) [((\y. y) z)]
-> [(\x. x x)        z]
->       z z


6. (λx. (λy. y x) (λz.z)) (λz.z)

Normal-order reduction:
   [(\x. (\y. y   x   ) (\z. z)) (\z.z)]
->      [(\y. y (\z. z) (\z. z))] --- the whole expression is redex since the body of abstraction was y x
->             [(\z. z) (\z. z)]
->               \z. z

Applicative-order reduction:

   (\x. [(\y. y    x) (\z. z)]) (\z.z)
->  \x.     [(\z.z x)]          (\z.z)
->  [\x.         x              (\z.z)]
->  \z. z

7. (λxyz. y z x) z (λxy.y) (λy.y)

Normal-order reduction:
   [(\x.\y.\z. (y z x)) z] (\x.\y.y) (\y.y)
->     [\y.\w. (y w z)     (\x.\y.y)](\y.y)
->         [\w.((\x.\y.y)  w     z) (\y.y)]
->             [(\x.\y.y) (\y.y)]z
->                [(\y.y)        z]
->                         z

Applicative-order reduction:
    [\x.\y.\z. (y z x) z] (\x.\y.y) (\y.y)
->     [\y.\w. (y          w  z) (\x.\y.y)](\y.y)
->         \w. ([(\x.\y.y) w] z)           (\y.y) -- left associative expression
->         \w.     [(\y.y)    z]           (\y.y) -- left associative expression
->        [\w.          z                  (\y.y)]
->                      z
