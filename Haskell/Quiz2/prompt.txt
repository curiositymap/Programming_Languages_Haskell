Practice problems
Here are some additional practice problems related to syntax.

This practice problem set is very abstract, and therefore harder than what you will see on the quiz. The quiz will be more similar in style to Part 1 of Homework 4, and to the examples that we did in class. However, I think the more abstract problems are good for practice since they force you to think carefully about the specification of the problem, and you cannot fall back on your background knowledge. That said, sometimes your background knowledge can be misleading (as we saw with the StackLang example in class), so maybe in some ways it will be easier!

Note that the practice problems ask you to draw ASTs for the values, which I won't have you do on the quiz. However, drawing the trees is exactly equivalent to writing the corresponding Haskell values, so it's good practice. And I think it's also a good reminder that Haskell values are really just another encoding of trees.

Consider the following grammar definition, where A, B, and C are non-terminal symbols, and 1 and 0 are terminal symbols.

     A   ::=   0 A 0   |   1 B 1
     B   ::=   B B C   |   0
     C   ::=   C C C   |   1


Determine whether each of the following strings can be generated by the above grammar. If the string can be generated, determine which non-terminal (A, B, or C) you must start with in order to generate it. Write either A, B, or C if the string can be generated, or write "syntax error" if it cannot be generated.
a. 101
b. 00111
c. 0011100
d. 0100110
e. 11111
f. 111111
g. 0010111
h. 0000
i. 0000111
j. 0011101

Implement the grammar as a Haskell data type.

For each string that can be produced by the grammar: (a) write the corresponding Haskell value, and (b) draw the corresponding abstract syntax tree using the Haskell data constructors as nodes in the tree.
